---
layout: base
title: Getting Started With Seam 3 via Example
---
:markdown
  # Getting Started with Seam 3 using the ConfBuzz Example
  ## Introduction

  In this tutorial we'll learn about many of the Seam 3 modules by building an example from scratch!
  The modules that we'll be using are:

  * Seam Faces
  * Seam Persistence
  * Seam Catch
  * Seam Security
  * Seam Config

  As an exercise for the reader, a REST interface for the application could be built using Seam Rest.
  The code for this project is available at [github]()

  ## Project Setup

  All Seam 3 modules are kept in an artifact repository, specifically the JBoss Nexus Repository. The
  easiest way to get started with Seam 3 is to add the desired modules to a maven project via the pom.xml. The
  full [pom.xml]() is available
  on github. Please refer to it to see everything that is going on. Throughout this tutorial we will refer
  to sections of the pom in-line.

  Seam, as well as other JBoss projects, have a Build of Materials (BOM) pom that lists the dependencies and
  versions of a particular release. This is the easiest way to get the correct jars and versions together
  (we'll also be making use of RichFaces, so we're including it's BOM also):
%pre(class='syntax xml')
  :escaped
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.jboss.seam</groupId>
                <artifactId>seam-bom</artifactId>
                <version>${seam.bom.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.richfaces</groupId>
                <artifactId>richfaces-bom</artifactId>
                <version>${richfaces.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>
%p
  There may be times when you need a newer version of a module than what is in the BOM. It's recommended
  to use the maven properties to specify the version that will be used:
%pre(class='syntax xml')
  :escaped
    <properties>
        <seam.bom.version>3.0.0.Final</seam.bom.version>
        <seam.faces.version>3.0.1.Final</seam.faces.version>
        <jboss.javaee6.version>2.0.0.Beta1</jboss.javaee6.version>
        <seam.validation.version>3.0.0.Final</seam.validation.version>
        <seam.reports.version>3.0.0.Alpha1</seam.reports.version>
        <jodatime.version>1.6.2</jodatime.version>
        <arquillian.version>1.0.0.Alpha5</arquillian.version>
        <richfaces.version>4.0.0.Final</richfaces.version>
    </properties>
%p
  Specifically we're using a newer version of Seam Faces, but we're also using Seam Reports and Seam Validation,
  which were not included in the initial 3.0.0.Final release of Seam.
.note
  :markdown
    We're including jodatime because we're going to be using it directly, however, if you are using Seam with
    Glassfish 3.1, it must be included due to [GLASSFISH-16318](http://java.net/jira/browse/GLASSFISH-16318).
    This should be fixed in Glassfish 3.1.1 and 3.2. It also needs to be included when using JBoss AS7 as Seam
    International uses it, things don't work quite right if it's not there see
    [SEAMREMOTING-38](https://issues.jboss.org/browse/SEAMREMOTING-38) for some background.

  :markdown
    The remaining portions of the pom.xml file should be familiar to those who have used maven, it covers the actual
    dependencies used and sets up some configuration for various plugins.

    The remaining setup for the project is of course to create directories and configuration files (thankfully in
    Java EE 6, these are very small files and can often be left out or empty!). Creating the directory structure is very
    simple:
%pre(class='syntax plain')
  :plain
    mkdir -p src/main/java/seam/example/confbuzz/model
    mkdir -p src/main/resources
    mkdir -p src/main/webapp/WEB-INF
    mkdir -p src/test/java/seam/example/confbuzz/test
    mkdir -p src/test/resources
:markdown
  ## Data Model
  We'll start with the data model for the project. All of the JPA entities will be under the `seam.example.confbuzz.model`
  package. You can see the history of the data model used for this blog at [the GitHub repo](). If you'd like to follow
  along, please go through the history and start at the beginning of each file as the version that exists in HEAD may have
  had further changes / additions.

  The first non security related entity will be `Conference`.
