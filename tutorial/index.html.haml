---
layout: base
title: Getting Started With Seam 3 using the Confbuzz Example
---
:markdown
  # Getting Started with Seam 3 using the ConfBuzz Example
  ## [Introduction](id:intro)

  This tutorial will introduce many of the Seam 3 modules by building an example
  from scratch! Features of the application pertain to the following modules:

  * Seam Faces
  * Seam Persistence
  * Seam Catch
  * Seam Security
  * Seam Config

  Each feature (sure as presentation, persistence, security, etc.) will be
  covered in it's own section / chapter. Please skip ahead as needed. The code
  for this project is available at [github](https://github.com/seam/seam-example-
  conffbuzz). For more information about a particular module and / or it's usage
  please see the reference documentation for that module, found at
  <http://docs.jboss.org/seam/3/>

  ## [Prerequisites](id:prereq)
  This tutorial makes use of Java EE 6 features, which maintains a base level
  of Java SE 6 for a runtime. It also assumes the reader is familiar with
  basic concepts of CDI (Contexts and Dependency Injection for Java EE, aka
  JSR 299), JPA (Java Persistence API), and JSF 2.0 (Java Server Faces) and
  Apache Maven. With the exception of Apache Maven, all the above technologies
  are core Java EE 6.

  The tutorial does not make use of any particular IDE or tooling. Such
  additional developer aids may come in handy during development. Please consult
  the IDE / tool of choice for any additional features that may pertain to CDI
  and / or Java EE 6 support.

  ## [Project Setup](id:project_setup) 
  All Seam 3 modules are kept in an artifact repository, specifically the
  JBoss Nexus Repository. The easiest way to get started with Seam 3 is
  to add the desired modules to a Maven project via the pom.xml. The full
  [pom.xml](https://github.com/seam/seam-example-confbuzz/blob/develop/pom.xml
  ) is available on github. Please refer to it to see the full configuration.
  Throughout this tutorial we will use the Maven build tool and refer to
  sections of the pom in-line.

  Seam, as well as other JBoss projects, have a Build of Materials (BOM) pom
  that lists the dependencies and versions of a particular release. This is
  the easiest way to get the correct jars and versions together:
.configuration.maven
  %span.listing_title pom.xml
  %pre.syntax.xml
    :escaped
      <dependencyManagement>
          <dependencies>
              <dependency>
                  <groupId>org.jboss.seam</groupId>
                  <artifactId>seam-bom</artifactId>
                  <version>${seam.bom.version}</version>
                  <type>pom</type>
                  <scope>import</scope>
              </dependency>
          </dependencies>
      </dependencyManagement>
:markdown
  Because Seam 3 is a collection of CDI modules and the Java EE 6 programming 
  model will be used, the following dependency will add the API classes for 
  compilation. They will not be needed for runtime as the application server
  will supply them so the provided scope is used.  
.configuration.maven
  %span.listing_title pom.xml
  %pre.syntax.xml
    :escaped
      <dependency>
          <groupId>org.jboss.spec</groupId>
          <artifactId>jboss-javaee-6.0</artifactId>
          <version>${jboss.javaee6.version}</version>
          <type>pom</type>
          <scope>provided</scope>
      </dependency>
:markdown
  The remaining portions of the pom.xml file should be familiar to those who
  have used Maven, it covers the actual dependencies used and sets up some
  configuration for various plugins.

  The last setup step for the project is of course to create directories and
  configuration files (thankfully in Java EE 6, these are very small files
  and can often be left out or empty). Creating the directory structure is
  very simple:
.configuration
  %span.listing_title Console
  %pre.syntax.plain
    :plain
      mkdir -p src/main/java/seam/example/confbuzz/model
      mkdir -p src/main/resources
      mkdir -p src/main/webapp/WEB-INF
      mkdir -p src/test/java/seam/example/confbuzz/test
      mkdir -p src/test/resources
:markdown
  ### [beans.xml](beans)
  The beans.xml file is a CDI marker file (which also may contain some simple
  configuration). It resides at src/main/webapp/WEB-INF/beans.xml:
.configuration.ee6
  %span.listing_title beans.xml
  %pre.syntax.xml
    :escaped
      <beans xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation=" http://java.sun.com/xml/ns/javaee http://docs.jboss.org/cdi/beans_1_0.xsd">
      </beans>
:markdown
  There is no configuration needed at this time, it's only a marker to enable
  CDI for the archive. There is now a simple application shell, ready for some
  fleshing out. [Setting up the view is next](view).

